#!/bin/bash

set -e

me="$(basename "$0")"

while getopts h arg; do
    case "$arg" in
        h)
            echo "NAME"
            echo "        $me - use shmig to migrate the database of a repository to the common anscestor of two refs"
            echo
            echo "SYNOPSIS"
            echo "        $me [options] [from_ref] [to_ref]"
            echo
            echo "DESCRIPTION"
            echo "        Finds the common database migration anscestor between [from_ref] and [to_ref] and uses shmig"
            echo "        to migrate the database to that anscestor"
            echo
            echo "OPTIONS"
            echo "        --repo-root|-r"
            echo "            Optional. The repo in which to operate this command. If not supplied, the command moves"
            echo "            up from the current working directory trying to find a .git directory."
            echo
            exit
        ;;
    esac
done
shift $(($OPTIND - 1))

while [ "$#" -gt 0 ]; do
    case "$1" in
        --repo-root|-r)
            ROOT="$2"
            shift
        ;;

        *)
            if [ -z "$from_ref" ]; then
                from_ref="$1"
                shift
            elif [ -z "$to_ref" ]; then
                to_ref="$1"
                shift
            else
                >&2 echo "E: $me: Invalid extra arguments found '$@'"
                exit 14
            fi
        ;;
    esac
done


# Find repo root, if not given
if [ -z "$ROOT" ]; then
    ROOT="$PWD"
    while [ "$ROOT" != "/" ] && [ ! -e "$ROOT/.git" ]; do
        ROOT="$(readlink -f "$ROOT/..")"
    done
    if [ ! -e "$ROOT/.git" ]; then
        >&2 echo "E: $me: Couldn't find repo root. (No .git directory.) You must call this from within a git repo"
        >&2 echo "   or pass the --repo-root|-r flag"
        exit 11
    fi
fi

# Make sure arguments is a valid git refs
for r in "$from_ref" "$to_ref"; do
    if ! git rev-parse --symbolic --abbrev-ref "$r" &>/dev/null; then
        >&2 echo "E: $me: '$r' is not a valid ref for the git repo at '$ROOT'"
        exit 13
    fi
done

# Check for shmig and general setup
if [ ! -x db/shmig ]; then
    >&2 echo "E: $me: This script requires \`shmig\` database migration utility (https://github.com/cfxmarkets/shmig). \`shmig\` should"
    >&2 echo "   be symlinked to db/shmig and configured to point to the correct migrations."
    exit 15
fi

# Include shmig configs
if [ -e "db/shmig.conf" ]; then
    . db/shmig.conf
fi
if [ -e "db/shmig.local.conf" ]; then
    . db/shmig.local.conf
fi

# Find 'shmig-show-migrations-for-ref' command
OWNDIR="$(dirname "$(readlink -f "$0")")"
if [ -e "$OWNDIR/shmig-show-migrations-for-ref" ]; then
    showmigsforref="$OWNDIR/shmig-show-migrations-for-ref"
elif command -v shmig-show-migrations-for-ref &>/dev/null; then
    showmigsforref="shmig-show-migrations-for-ref"
else
    >&2 echo "E: $me: Couldn't find script 'shmig-show-migrations-for-ref'. Searched on path and at"
    >&2 echo "   $OWNDIR/"
    exit 18
fi

# Get migrations list from target ref
if ! targ_migs="$("$showmigsforref" "$to_ref")"; then
    >&2 echo "E: $me: CAN'T GET MIGRATIONS FOR REF '$to_ref'"
    exit 16
fi

# Get migrations list from current branch
if ! current_migs="$("$showmigsforref" "$from_ref")"; then
    >&2 echo "E: $me: CAN'T GET MIGRATIONS FOR REF '$from_ref'"
    exit 17
fi

# Find the common anscestor
i=1
targ="$(echo "$current_migs" | wc -l)"
while IFS= read -r -d $'\n' m; do
    m="$(basename "$m")"
    # If we still have target migrations to check, then if the names don't match, this is our break point
    if [ "$(echo "$targ_migs" | wc -l)" -lt "$i" ] || [ "$m" != "$(basename "$(echo "$targ_migs" | sed "${i}q;d")")" ]; then
        targ=$(($i - 1))
        break
    fi
    !((i++))
done < <(echo "$current_migs")

# Determine how to migrate
# Migrate only if we found a difference in the migration stacks
RET=0
if [ ! "$targ" -eq "$(echo "$current_migs" | wc -l)" ]; then
    cd db
    # Making this an array so it handles turning into command arguments well
    till=()

    # If there was at least one commonality, migrate down to that
    if [ "$targ" -gt 0 ]; then
        targ="$(echo "$targ_migs" | sed "${targ}q;d")"
        echo "Migrating down to $targ"
        targ="$(echo "$targ" | sed -r 's/^([^-]+)-.*$/\1/')"
        till+=("till=$targ")
    fi
    if ./shmig down "${till[@]}"; then
        RET=0
    else
        RET="$?"
        >&2 echo "E: $me: Couldn't perform migration."
    fi
fi

exit "$RET"

