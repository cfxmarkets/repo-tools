#!/bin/bash

set -e

me="$(basename "$0")"

function show_usage() {
    echo "NAME"
    echo "        $me - use shmig to list migrations for a particular branch of a git repository"
    echo
    echo "SYNOPSIS"
    echo "        $me [options] [ref]"
    echo
    echo "DESCRIPTION"
    echo "        Checks out [ref] into a temp directory and uses shmig to get a full list of available migrations."
    echo "        The intended use for this in conjunction with \`migrate-to-common-ancestor\`."
    echo
    echo "OPTIONS"
    echo "        --repo-root|-r"
    echo "            Optional. The repo in which to operate this command. If not supplied, the command moves"
    echo "            up from the current working directory trying to find a .git directory."
    echo
    echo "        --tmp-dir|-t"
    echo "            Optional. The path to the directory to use as a temp directory. If none provided, a random"
    echo "            temp directory will be created under /tmp/."
    echo
    echo "        --db-dir|-d"
    echo "            Optional. The directory in which to find the shmig config files and the"
    echo "            migrations (relative to the repo root)"
    echo
    echo "        --no-cleanup|-n"
    echo "            Optional. Don't delete the temporary directory."
    echo
}

CLEANUP="true"
while [ "$#" -gt 0 ]; do
    case "$1" in
        --help|-h) show_usage && exit ;;
        --repo-root|-r)
            ROOT="$2"
            shift 2
        ;;

        --tmp-dir|-t)
            TMPDIR="$2"
            shift 2
        ;;

        --db-dir|-d)
            RELDBDIR="$2"
            shift 2
        ;;

        --no-cleanup|-n)
            CLEANUP="false"
            shift
        ;;

        *)
            if [ -z "$ref" ]; then
                ref="$1"
                shift
            else
                >&2 echo "E: $me: Invalid extra arguments found '$@'"
                exit 14
            fi
        ;;
    esac
done

# Find repo root, if not given, then go to it
if [ -z "$ROOT" ]; then
    ROOT="$PWD"
    while [ "$ROOT" != "/" ] && [ ! -e "$ROOT/.git" ]; do
        ROOT="$(readlink -f "$ROOT/..")"
    done
    if [ ! -e "$ROOT/.git" ]; then
        >&2 echo "E: $me: Couldn't find repo root. (No .git directory.) You must call this from within a git repo"
        >&2 echo "   or pass the --repo-root|-r flag"
        exit 11
    fi
fi
cd "$ROOT"

# Get db dir, if not set
if [ -z "$RELDBDIR" ]; then
    RELDBDIR=db
fi

# Make sure argument is a valid git ref
if [ -z "$ref" ]; then
    >&2 echo "E: $me: You must pass a valid git ref as the first argument to this script."
    exit 12
fi
if ! git rev-parse --symbolic --abbrev-ref "$ref" &>/dev/null; then
    >&2 echo "E: $me: '$1' is not a valid ref for the git repo at '$ROOT'"
    exit 13
fi

# Check for shmig and general setup
if [ -x "$RELDBDIR"/shmig ]; then
    shmigcmd="$(readlink -f "$RELDBDIR/shmig")"
elif command -v shmig &>/dev/null; then
    shmigcmd="shmig"
else
    >&2 echo "E: $me: This script requires CFX's fork of the \`shmig\` database migration utility"
    >&2 echo "   (https://github.com/cfxmarkets/shmig). \`shmig\` should either be installed"
    >&2 echo "   in your path, or installed locally at \`$RELDBDIR/shmig\`"
    exit 15
fi

# Include shmig configs
if [ -e "$RELDBDIR/shmig.conf" ]; then
    . "$RELDBDIR"/shmig.conf
fi
if [ -e "$RELDBDIR/shmig.local.conf" ]; then
    . "$RELDBDIR"/shmig.local.conf
fi

# From here on, we don't want to exit directly because we always want to clean up first. Use RET as proxy
RET=0

# Checkout the db tree for the target
if [ -z "$TMPDIR" ]; then
    TMPDIR="/tmp/$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13)"
fi
mkdir -p "$TMPDIR"
if ! GIT_WORK_TREE="$TMPDIR" git checkout "$ref" -- "$RELDBDIR"; then
    RET="${PIPESTATUS[0]}"
    >&2 echo "E: $me: Couldn't check out ref '$ref'"
else
    # show migrations from target
    cd "$RELDBDIR"
    if ! "$shmigcmd" -m "$TMPDIR/$RELDBDIR/$MIGRATIONS" show; then
        RET="${PIPESTATUS[0]}"
    fi
fi

# HACK: For some reason, git automatically stages "ghost" changes in the actual repo, which we need to clear
cd "$ROOT"
git reset &>/dev/null || true

if [ "$CLEANUP" == "true" ]; then
    rm -Rf "$TMPDIR" || true
fi

exit "$RET"

